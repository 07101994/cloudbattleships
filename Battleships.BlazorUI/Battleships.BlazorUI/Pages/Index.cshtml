@page "/"
@using Blazored.Js
@using Battleships.Model.Helpers


<div class="container">
    <div class="row text-center">
        <div class="col-sm">
            <h2>Blazorships - a battleships implementation</h2>
            <p>Built using Blazor, Cosmos Db, Azure Functions and Azure SignalR</p>
            <p>Check out the code on <a href="https://github.com/bjorndaniel/cloudbattleships">Github</a></p>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <form class="form-inline justify-content-center">
                <div class="form-group mx-sm-3 mb-2">
                    <label for="userName" class="sr-only">Username:</label>
                    <input type="text" class="form-control" id="userName" placeholder="Username" bind="@PlayerName" disabled="@(!CurrentGame.SpotAvailable)" />
                </div>
                <button type="button" class="btn btn-primary mb-2" id="btnPlay" disabled="@(!CurrentGame.SpotAvailable)">Play game</button>
                <input type="hidden" bind="@Player.Id" id="playerId" />
                <input type="hidden" bind="@CurrentGame.id" id="gameId" />
                <input type="hidden" bind="@SelectedRow" id="hfSelectedRow" />
                <input type="hidden" bind="@SelectedColumn" id="hfSelectedColumn" />
                <input type="hidden" bind="@ClientId" id="hfClientId" />
            </form>
        </div>
    </div>
    <div class="row text-center">
        <div class="col-sm">
        </div>
        <div class="col-sm">
        </div>
    </div>
    <div class="row">
        <div class="col-sm text-center">
            <h4>Your ships</h4>
            <table class="ship-board">
                @for (int i = 1; i <= 10; i++)
                {
                    <tr>
                        @for (int j = 1; j <= 10; j++)
                        {
                            var panel = Player.GameBoard.FirstOrDefault(_ => _.Row == i && _.Column == j);
                            <td class="ship-tile @((panel?.IsHit??false) ? "red" : "")">
                                <div style="width:35px;height:35px;">
                                    @(panel?.Status)
                                </div>
                            </td>
                        }
                    </tr>
                }
            </table>

        </div>
        <div class="col-sm text-center">
            <h4>Firing board</h4>
            <table class="ship-board">
                @for (int i = 1; i <= 10; i++)
                {
                    <tr>
                        @for (int j = 1; j <= 10; j++)
                        {
                            var square = new PanelDTO { Row = i, Column = j };
                            <td class="ship-tile @(Player.FiringBoard.FirstOrDefault(_ => _.Row == i && _.Column == j)?.Status == "X" ? "green" : "")">
                                <div style="width:35px;height:35px;" class="@((SelectedRow == i && SelectedColumn == j) ? "yellow" : "")"
                                     onclick="@(() => SelectFiringSquare(square))">@Player.FiringBoard.FirstOrDefault(_ => _.Row == i && _.Column == j)?.Status</div>
                                </td>
                            }
                    </tr>
                }
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col-sm text-center">
            <p>When it is your turn, click on an empty square on the firing board and press fire</p>
            <br />
            <button class="btn btn-danger" disabled="@(!Player.IsMyTurn)" id="btnFire">Fire!</button>
            <button class="btn btn-primary" disabled="@(!Player.IsMyTurn)" id="btnEnd">Let the server play to end</button>
            <h4>@CurrentGame.StatusText</h4>
        </div>
    </div>
    <div class="row">
        <div class="col-sm text-center">
            <h3>Chat with all players currently online</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-sm text-center">
            <form class="form-inline justify-content-center">
                <div class="form-group mx-sm-3 mb-2">
                    <label for="message" class="sr-only">Message:</label>
                    <input type="text" class="form-control" id="messageInput" placeholder="Type your message here" />
                </div>
                <input type="button" disabled="@(!CurrentGame.IsStarted)" class="btn btn-success mb-2" id="sendButton" value="Send Message" />
                <input type="button" class="btn btn-success" id="btnUpdateGame" style="display:none;" value="" onclick="@UpdateGame" />
            </form>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>

@functions
{
    public int SelectedRow { get; set; } = -1;
    public int SelectedColumn { get; set; } = -1;
    string PlayerName { get; set; }
    GameDTO CurrentGame { get; set; }
    PlayerDTO Player { get; set; }  
    string StartGameId { get; set; }
    string ClientId { get; set; }


    protected override void OnInit()
    {
        CurrentGame = GameController.CreateGameDTO();
        Player = CurrentGame.Player1;
        ClientId = Guid.NewGuid().ToString();
    }

    protected override void OnAfterRender()
    {
        LocalStorage.Save("Connection", new ConnectionSettings());
        JsInterop.InitSignalR();
    }

    void SelectFiringSquare(PanelDTO selectedSquare)
    {
        Console.WriteLine($"Clicked on {selectedSquare.Row} {selectedSquare.Column}");
        var panel = Player.FiringBoard.FirstOrDefault(_ => _.Row == selectedSquare.Row && _.Column == selectedSquare.Column);
        if (panel == null || panel.Status != " ")
        {
            return;
        }
        SelectedRow = selectedSquare.Row;
        SelectedColumn = selectedSquare.Column;
    }

    void UpdateGame()
    {
        var game = LocalStorage.Get<GameDTO>("Game");
        Console.WriteLine(game.id);
        if (game.Player1.ClientId == ClientId || game.Player2.ClientId == ClientId)
        {
            Console.WriteLine($"Updating game with IsStarted: {game.IsStarted}");
            var player = game.GetPlayerByClientId(ClientId);
            SelectedColumn = -1;
            SelectedRow = -1;
            if (player != null)
            {
                Console.WriteLine($"Setting player and game with SpotAvailable: {game.SpotAvailable} IsStarted: {game.IsStarted} IsMyTurn: {Player.IsMyTurn}");
                Player = player;
                CurrentGame = game;
            }
            if (CurrentGame.GameOver)
            {
                JsInterop.Alert(CurrentGame.StatusText);
            }
        }
    }
}